<!-- Make sure that the knitr package is installed and loaded. -->
library(knitr)
library(markdown)
```{r}
500 * 0.5787
500 * (1 - 0.5787)
315 * 0.5787
315 * (1 - 0.5787)
549 * 0.5787
549 * (1 - 0.5787)
(-0.0264 - 0) / 0.0349
pnorm(0.756, lower.tail = F)
pnorm(-0.756, lower.tail = F)
pnorm(-0.756)
2 * pnorm(-0.756)
pnorm(2.54, lower.tail = F)
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
plot(mlb11$runs ~ mlb11$at_bats)
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(mlb11$at_bats, mlb11$runs)
x = mlb11$at_bats
y = mlb11$runs
plot_ss(x,y)
plot_ss(x,y)
lm(y ~ x)
m1 <- lm(runs ~
at_bats, data = mlb11)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
m1 <- lm(runs ~ homeruns, data = mlb11)
summary(m1)
plot(mlb11$runs ~
mlb11$at_bats)
abline(m1)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
plot(mlb11$runs ~ mlb11$homeruns)
abline(m1)
m1 <- lm(runs ~ at_bats, data = mlb11)
plot(mlb11$runs ~ mlb11$at_bats)
ablines(m1)
abline(m1)
plot(m1$residuals ~
mlb11$at_bats)
plot(m1$residuals ~ mlb11$at_bats)
m1$residuals
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)
hist(m1$residuals)
hist(m1$residuals)
hist(m1$residuals)
qqnorm(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
summary(lm(runs ~ hists, data = mlb11))
summary(lm(runs ~ hits, data = mlb11))
summary(lm(runs ~ wins, data = mlb11))
summary(lm(runs ~ bat_avg, data = mlb11))
plot(m1$wins ~ mlb11$runs)
summary(lm(runs ~ new_obase, data = mlb11))
summary(lm(runs ~ new_onbase, data = mlb11))
summary(lm(runs ~ new_onbase, data = mlb11))
summary(lm(runs ~ new_slug, data = mlb11))
summary(lm(runs ~ new_obs, data = mlb11))
load(url("http://www.openintro.org/stat/data/evals.RData"))
load(url("http://www.openintro.org/stat/data/evals.RData"))
hist(evals$score)
median(evals$score)
summary(evals$score)
d = subset(eval, eval$score < 3)
d = subset(evals, evals$score < 3)
dim(d)
dim(evals)
plot(evals$score ~ evals$bty_avg)
?jitter
m_bty = lm(evals$score ~ evals$bty_avg)
abline(m_bty)
plot(m_bty$residuals)
plot(evals$bty_avg ~ evals$bty_f1lower)
plot(evals$bty_avg ~ evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[, 13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
multiLines(m_bty_gen)
m_bty_gen <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
m1 <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m1)
summary(m1)$adj.r.squared
summary(m_full)$adj.r.squared
m2 = lm(score ~ rank + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m2)$adj.r.squared
m3 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval + cls_students + cls_level + cls_credits + bty_avg, data = evals)
summary(m3)$adj.r.squared
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(FlyAsh, data=training)
qplot(FlyAsh,CompressiveStrength, data=training)
dim(training)
names(training)
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh",Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")], y=training$CompressiveStrength, plot="pairs"")
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")], y=training$CompressiveStrength, plot="pairs"")
""
featurePlot(x=training[,c("Cement","BlastFurnaceSlag","FlyAsh","Water","Superplasticizer","CoarseAggregate","FineAggregate","Age")], y=training$CompressiveStrength, plot="pairs")
curve((e^(-x))cos(x), from=0, to=2)
curve(e^(-x)cos(x), from=0, to=2)
curve(e^(-x)cos(x), from=0, to=2)
curve(e^(-x)*cos(x), from=0, to=2)
curve(e^(-x)*cos(x), 0, 2)
curve(2.7182^(-x)*cos(x), 0, 2)
curve(cos(x), 0, 2)
curve(cos(x), 0, 10)
curve(2.7182^(-x)*cos(x), 0, 10)
curve(2.7182^(-x/5)*cos(x), 0, 10)
curve(2.7182^(-x/10)*cos(x), 0, 10)
curve(2.7182^(-x/30)*cos(x), 0, 10)
curve(2.7182^(-x/30)*cos(x), 0, 100)
curve(2.7182^(-x/30)*cos(x), -1, 100)
curve(2.7182^(-x/30)*cos(x), -1, 10)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
modelFit4<- svm(CompressiveStrength~.,data=training)
result4<- predict(modelFit4,testing)
accuracy(result4,testing$CompressiveStrength)
library(e1071)
result4
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
library(forecast)
install.package("forecast")
install.packages("forecast")
library(forecast)
setwd("~/dev/misc/coursera/practical-ml-prediction-assignment")
---
title: 'Coursera: Practical Machine Learning Prediction Assignment'
```{r, echo=FALSE}
message(sprintf("Run time: %s\nR version: %s", Sys.time(), R.Version()$version.string))
